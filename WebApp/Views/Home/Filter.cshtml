@{
    ViewData["Title"] = "Filter";
}
<h2>@ViewData["Title"].</h2>

public static IEnumerable<Product> <br />
    Filter(this IEnumerable<Product> product, Func<Product, bool>
    selector)<br />
    {<br />
    foreach (Product newProduct in product)   <br />
    {<br />
    if (selector(newProduct))<br />
    {<br />
    yield return newProduct;<br />
    }<br />
    <br />
    }<br />
    }<br />
    <br />
    public ViewResult Filter()<br />
    {<br />
    TestProduction test = new TestProduction<br />
    {<br />
    Products = new List<Product><br />
        {<br />
        new Product { Name = "TestProduct", Number = 1, Quantity = 100 },<br />
        new Product { Name = "TestProduct", Number = 2, Quantity = 13 },<br />
        new Product { Name = "Product", Number = 3, Quantity = 1223 },<br />
        new Product { Name = "Product", Number = 4, Quantity = 432 }<br />
        }<br />
        };<br />
                           <br />
        /*<br />
        * The longer way is to do this<br />
        *<br />
        * Func<Product, bool> filter = delegate(Product product) {<br />
            * return product.Name == "Product";<br />
            * };<br />
            * */<br />
                  <br />
            //shorter way<br />
            Func<Product, bool><br />
                delegateLambda = product => product.Name == "Product";<br />
                    <br />
                decimal totalQuantity = 0;<br />
                foreach (Product product in test.Products.Filter(delegateLambda))<br />
                {<br />
                totalQuantity += product.Quantity;<br />
                }<br />
                    <br />
                ViewData["Filter"] = String.Format("Quantity: {0}", totalQuantity);<br />
                return View();<br />
    Result :  @ViewData["Filter"];
